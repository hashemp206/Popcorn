//
//  SearchMoviesPresenter.swift
//  Popcorn
//
//  Created by Hashem Aboonajmi on 3/29/18.
//  Copyright (c) 2018 Hashem Aboonajmi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Foundation

protocol SearchMoviesPresentationLogic
{
    func presentSearchedMovies(response: SearchMovies.Search.Response)
    func presentSearchFailure(response: SearchMovies.SearchFailure.Response)
    func presentSearchStarted()
    func presentRecentSearches(response: SearchMovies.FetchRecentSearches.Response)
}

class SearchMoviesPresenter: SearchMoviesPresentationLogic
{
    weak var viewController: SearchMoviesDisplayLogic?
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .medium
        dateFormatter.timeStyle = .none
        return dateFormatter
    }()
    
    func presentSearchStarted()
    {
        viewController?.displaySearchStarted()
    }
    
    func presentSearchedMovies(response: SearchMovies.Search.Response)
    {
        let displayedMovies = response.movies.map { movie -> SearchMovies.Search.ViewModel.DisplayMovie in
            
            var posterURL: URL?
            if let posterPath = movie.poster_path {
                posterURL = URL(string: App.posterBaseURL.absoluteString + posterPath)
            }
            let releaseDateStr: String
            if let releaseDate = movie.releaseDate {
                releaseDateStr = dateFormatter.string(from: releaseDate)
            } else {
                releaseDateStr = "TBA"
            }
            
            return SearchMovies.Search.ViewModel.DisplayMovie(id: movie.id, title: movie.title, posterURL: posterURL, releaseDate: releaseDateStr, description: movie.description)
        }
        
        viewController?.displaySearchedMovies(viewModel: SearchMovies.Search.ViewModel(displayedMovies: displayedMovies))
    }
    
    func presentSearchFailure(response: SearchMovies.SearchFailure.Response)
    {
        let reason: SearchMovies.SearchFailure.ViewModel.Reason
        
        switch URLError.Code(rawValue: (response.error as NSError).code) {
        case .notConnectedToInternet:
            reason = .noConnection
        default:
            // an error occured while fetching movies
            reason = .error(message: response.error.localizedDescription)
        }
        
        viewController?.displaySearchFailure(viewModel: SearchMovies.SearchFailure.ViewModel(reason: reason))
    }
    
    func presentRecentSearches(response: SearchMovies.FetchRecentSearches.Response)
    {
        viewController?.displayRecentSearches(viewModel: SearchMovies.FetchRecentSearches.ViewModel(recentSearches: response.recentSearches))
    }
}

