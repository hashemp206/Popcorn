//
//  SearchMoviesInteractor.swift
//  Popcorn
//
//  Created by Hashem Aboonajmi on 3/29/18.
//  Copyright (c) 2018 Hashem Aboonajmi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol SearchMoviesBusinessLogic
{
    func searchMovies(request: SearchMovies.Search.Request)
    func fetchNextPage()
    func fetchRecentSearches()
}

protocol SearchMoviesDataStore
{
    
}

class SearchMoviesInteractor: SearchMoviesBusinessLogic, SearchMoviesDataStore
{
    var presenter: SearchMoviesPresentationLogic?
    var worker = SearchMoviesWorker()
    
    
    private var page: Int = 0
    private var searchRequest: SearchMovies.Search.Request?
    
    func searchMovies(request: SearchMovies.Search.Request)
    {
        self.searchRequest = request
        // reset paging, because a new search request has initiated
        // // server pagination starts from 1
        page = 1
        
        // ask worker to search for new movies
        presenter?.presentSearchStarted()
        search(withTerm: request.searchTerm)
    }
    
    /// starts fetching movies for the next page
    
    func fetchNextPage()
    {
        if let searchRequest = searchRequest {
            search(withTerm: searchRequest.searchTerm)
        }
    }
    
    private func search(withTerm term: String)
    {
        worker.searchMovies(withSearchTerm: term, page: page).then { [weak self] movies -> Void in
            
            // increase page number, so next page request fetch items for the next page
            self?.page += 1
            
            // present fetched movies
            self?.presenter?.presentSearchedMovies(response: SearchMovies.Search.Response(movies: movies))
            
            }.catch { [weak self] error in
                
                // an error occured while fetching movies
                self?.presenter?.presentSearchFailure(response: SearchMovies.SearchFailure.Response(error: error))
       
        }
    }
    
    func fetchRecentSearches()
    {
        worker.fetchRecentSearches().then { [weak self] recentSearches -> Void in
            self?.presenter?.presentRecentSearches(response: SearchMovies.FetchRecentSearches.Response(recentSearches: recentSearches))
            }
    }
}

