//
//  SearchMoviesWorker.swift
//  Popcorn
//
//  Created by Hashem Aboonajmi on 3/29/18.
//  Copyright (c) 2018 Hashem Aboonajmi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import PromiseKit
import SwiftyUserDefaults

class SearchMoviesWorker
{
    private let popcornApi = PopcornApi()
    private let recentSearchesStore: RecentSearchesStoreProtocol
    
    init(recentSearchesStore: RecentSearchesStoreProtocol) {
        self.recentSearchesStore = recentSearchesStore
    }
    
    func searchMovies(withSearchTerm searchTerm: String, page: Int) -> Promise<[Movie]>
    {
        // beacuse of a bug in Swift 4.1 I can't use wrap PromiseKit wrap here. see: https://github.com/mxcl/PromiseKit/issues/834
        
        return Promise { fulfill, reject in
            popcornApi.search(withQuery: searchTerm, page: page, completion: { [weak self] (movies, error) in
                if let error = error {
                    reject(error)
                } else if let movies = movies {
                    
                    // if search query had some result, store the successfull search term
                    if page == 1 && movies.isEmpty == false {
                        // store new successfull search term
                        self?.store(newSearchTerm: searchTerm)
                    }
                    
                    fulfill(movies)
                } else {
                    let error = NSError(domain: Constants.fidilioDomain, code: 0, userInfo: [NSLocalizedDescriptionKey: "unknown error occured while fetching movies"])
                    reject(error)
                }
            })
        }
    }
    
    func fetchRecentSearches() -> Promise<[String]>
    {
        return wrap {
            recentSearchesStore.fetchRecentSearches(completionHandler: $0)
        }
    }
    
    func cancelSearch()
    {
        popcornApi.cancelSearch()
    }
    
    private func store(newSearchTerm term: String)
    {
        recentSearchesStore.insert(newSearchTerm: term)
    }
}

